---
AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS Auto Scaling Groups"

Parameters:
  NetworkStack:
    Type: "String"
    Description: "Network stack to apply to."

  IntranetStack:
    Type: "String"
    Description: "Intranet stack to apply to."

  AMI:
    Type: AWS::EC2::Image::Id
    Description: ID of Amazon Machine Image for ECS

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Which key to use for ECS nodes?

  NumNodes:
    Type: String
    Description: How many nodes for this cluster?
    # Lets update this when services are added to the cluster/elb - should be 3, one in each AZ
    Default: 0

  ClusterName:
    Type: String
    Description: Name of the cluster for services to join?
    Default: 0

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  # Launch Configuration defines WHAT gets launched
  ECSLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      EbsOptimized: True
      IamInstanceProfile: EcsNode
      ImageId: !Ref AMI
      InstanceMonitoring: True
      InstanceType: m4.large
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref EcsSecurityGroup

      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - # this line creates the "array within the array" that Join requires as the 2nd arg
            - "#!/bin/bash"
            - !Join ["",["echo \"ECS_CLUSTER=", !Ref ClusterName, "\" >> /etc/ecs/ecs.config"]]
            - "sudo yum -y erase ntp*"
            - "sudo yum -y install chrony"
            - "sudo service chronyd start"

  # Auto Scaling Group defines WHERE it gets launched
  EcsNodesASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NumNodes
      HealthCheckGracePeriod: 420
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref ECSLaunchConfig
      MaxSize: !Ref NumNodes
      MinSize: !Ref NumNodes
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub ${NetworkStack}-SubnetNodesAId
      - Fn::ImportValue:
          !Sub ${NetworkStack}-SubnetNodesBId
      - Fn::ImportValue:
          !Sub ${NetworkStack}-SubnetNodesCId
      Tags:
      - Key: Cluster
        Value: !Ref ClusterName
        PropagateAtLaunch: True

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref "AWS::StackName"
      GroupDescription: !Ref "AWS::StackName"
      VpcId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-VpcId

  EcsSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: "-1" # allow all traffic outbound

  EcsSecurityGroupEgressAllowAllVPN:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      CidrIp:
        Fn::ImportValue:
          !Sub ${IntranetStack}-VpnCidr
      IpProtocol: "-1" # allow all traffic outbound

  # allow ECS nodes to receive NTP traffic
  EcsSecurityGroupIngressAllowNtp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: "udp"
      FromPort: 123
      ToPort: 123

  # allow ECS nodes to receive ssh traffic
  EcsSecurityGroupIngressAllowSsh:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      CidrIp:
        Fn::ImportValue:
          !Sub ${IntranetStack}-VpnCidr
      IpProtocol: "tcp"
      FromPort: 22
      ToPort: 22

  # allow ECS nodes to receive traffic from the local VPC range
  EcsSecurityGroupIngressAllowTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      CidrIp:
        Fn::ImportValue:
          !Sub ${NetworkStack}-VpcCidr
      IpProtocol: "tcp"
      FromPort: 1024
      ToPort: 65535

  # allow ECS nodes to receive X-Ray traffic
  EcsSecurityGroupIngressAllowXRay:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      CidrIp:
        Fn::ImportValue:
          !Sub ${NetworkStack}-VpcCidr
      IpProtocol: "udp"
      FromPort: 2000
      ToPort: 2000

  # allow ECS nodes to receive ICMP traffic
  EcsSecurityGroupIngressAllowICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      CidrIp:
        Fn::ImportValue:
          !Sub ${IntranetStack}-VpnCidr
      IpProtocol: icmp
      FromPort: 8
      ToPort: -1

  # allow ECS nodes to receive traffic on docker default http
  EcsSecurityGroupIngressAllowDockerHttp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      CidrIp:
        Fn::ImportValue:
          !Sub ${IntranetStack}-VpnCidr
      IpProtocol: "tcp"
      FromPort: 8090
      ToPort: 8090

  # allow ECS nodes to receive HTTP
  EcsSecurityGroupIngressAllowHTTP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: "tcp"
      FromPort: 80
      ToPort: 80

  # allow ECS nodes to receive HTTPS
  EcsSecurityGroupIngressAllowHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: "tcp"
      FromPort: 443
      ToPort: 443

Outputs:
  EcsSecurityGroup:
    Description: "Security Group for ECS services"
    Value:  !Ref EcsSecurityGroup
    Export:                               # export the ID of the Vpc so other stacks can import it
      Name: !Sub ${AWS::StackName}-EcsSecurityGroup
