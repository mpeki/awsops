---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Service setup for load balancer"

Parameters:
  NetworkStack:
    Type: "String"
    Description: "Network stack to apply to."

  EcsStack:
    Type: "String"
    Description: "ECS stack to apply to."

  EcsCluster:
    Type: "String"
    Description: "The ECS cluster for services"

  ElbForServices:
    Type: "String"
    Description: "The ARN of load balancer"

  ElbListener:
    Type: "String"
    Description: "The ARN of load  balancer listener"

  RulePriority:
    Type: "String"
    Description: "The priority of load balancer listener rule"

  EcsTaskRoleForServices:
    Type: "String"
    Description: "The role used for tasks"

  EcsExecutionRoleForServices:
    Type: "String"
    Description: "The role used for execution (used by Fargate)"

  EcsServiceRole:
    Type: "String"
    Description: "The role used for service"

  KeycloakDBHost:
    Type: "String"
    Default: "dodgame-security-db.cjhxdvvnmntx.eu-north-1.rds.amazonaws.com"
    Description: "Database host for keycloak"

  KeycloakDBPort:
    Type: "String"
    Default: "3306"
    Description: "Database port for keycloak"

  KeycloakHostname:
    Type: "String"
    Description: "Keycloak hostname"
    Default: "services.dod-game.com"

  ServiceName:
    Type: "String"
    Description: "Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a region or across multiple regions."

  ServiceCpu:
    Type: "Number"
    Default: 100
    Description: "The minimum number of CPU units to reserve for the service."

  ServiceMemory:
    Type: "Number"
    Default: 768
    Description: "The number of MiB of memory to reserve for the service."

  ServicePort:
    Type: "Number"
    Description: "The port number on the service bound to the host port.."

  ServicePath:
    Type: "String"
    Default: "/auth"
    Description: "Part of a single path pattern - e.g.  '/<ServicePath>/*'"

  ServiceDesiredCount:
    Type: "Number"
    Description: "The number of simultaneous tasks that you want to run on the cluster.."

  LaunchType:
    Type: String
    Default: "EC2"
    AllowedValues: ["EC2", "FARGATE"]
    Description: (Optional) The launchtype - can be EC2 or Fargate

  HealthCheckPath:
    Type: String
    Default: "health"
    Description: "Path for health check"

  KeyStoreUrl:
    Type: String
    Default: ""
    Description: SPD keystore URL

  HealthCheckProtocol:
    Type: String
    Default: "HTTP"
    Description: "health check endpoint"

  TargetGroupPort:
    Type: Number
    Default: 80
    Description: target group port either 443/80

  TargetGroupProtocol:
    Type: String
    Default: "HTTP"
    Description: protocol to use when connecting over https

  SecretArn:
    Type: String
    Description: "ARN of artifactory secret in Secret Manager"
    Default: ''


Conditions:
  LaunchTypeFargate: !Equals [!Ref 'LaunchType', 'FARGATE']
  CreateLoadBalancerResources: !Not [!Equals [!Ref ElbForServices, '']]
  CreateListenerResource: !And
    - !Not [!Equals [!Ref ElbForServices, '']]
    - !Equals [!Ref ElbListener, '']
  UsePrivateRepo: !Not [!Equals [!Ref SecretArn, '']]

Resources:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/taas/, !Ref ServiceName]]
      RetentionInDays: 14

  ServiceTaskdefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Join ['-', [taas, !Ref ServiceName]]
      Cpu: !If ['LaunchTypeFargate', !Ref ServiceCpu, !Ref "AWS::NoValue"]
      Memory: !If ['LaunchTypeFargate', !Ref ServiceMemory, !Ref "AWS::NoValue"]
      NetworkMode: !If ['LaunchTypeFargate', awsvpc, bridge]
      RequiresCompatibilities: !If ['LaunchTypeFargate', [FARGATE], [EC2]]
      TaskRoleArn: !Ref EcsTaskRoleForServices
      ExecutionRoleArn: !If [LaunchTypeFargate, !Ref EcsExecutionRoleForServices, !Ref "AWS::NoValue"]
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: "macp/dod-keycloak:22.0.1"
          RepositoryCredentials: !If
          - UsePrivateRepo
          - CredentialsParameter: !Ref SecretArn
          - !Ref "AWS::NoValue"
          Command: ["start-dev",  "--http-port=8181", "--hostname-admin-url=https://services.dod-game.com/auth", "--hostname-debug=true", "--import-realm"]
          Cpu: !If [LaunchTypeFargate, !Ref "AWS::NoValue", !Ref ServiceCpu]
          Memory: !If [LaunchTypeFargate, !Ref "AWS::NoValue", !Ref ServiceMemory]
          Environment:
            - Name: KC_DB_URL_HOST
              Value: !Ref KeycloakDBHost
            - Name: KC_DB_URL_PORT
              Value: !Ref KeycloakDBPort
            - Name: KC_HOSTNAME
              Value: !Ref KeycloakHostname
            - Name: KC_HTTP_RELATIVE_PATH
              Value: "/auth"
            - Name: KC_TRANSACTION_XA_ENABLED
              Value: "false"
            - Name: PROXY_ADDRESS_FORWARDING
              Value: 'true'
            - Name: KC_PROXY
              Value: 'edge'
            # Move to secrets
            - Name: KEYCLOAK_ADMIN
              Value: "admin"
            - Name: KEYCLOAK_ADMIN_PASSWORD
              Value: "admin"
            - Name: KEYCLOAK_LOGLEVEL
              Value: "DEBUG"
            - Name: ROOT_LOGLEVEL
              Value: "DEBUG"
            - Name: KC_DB_URL_DATABASE
              Value: "dodgamesecurityDB"
            - Name: KC_DB_USERNAME
              Value: "dodgamesecurity"
            - Name: KC_DB_PASSWORD
              Value: "!dodgamesecurity!"
            - Name: KC_DB_TIMEOUT_WAIT_SECONDS
              Value: "600"
            - Name: KC_HEALTH_ENABLED
              Value: "true"
          Essential: "true"
          PortMappings:
            - ContainerPort: !Ref ServicePort
              # The host port number on the container instance that you want to reserve for your container.
              # You can specify a non-reserved host port for your container port mapping, omit the host port, or set the host port to 0.
              # If you specify a container port but no host port, your container host port is assigned automatically .
              HostPort: !If ['LaunchTypeFargate', !Ref ServicePort, 0]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !If ['LaunchTypeFargate', ecs, !Ref "AWS::NoValue"]

  # target group for service
  TargetGroupForService:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: CreateLoadBalancerResources
    Properties:
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: !Ref HealthCheckProtocol
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      TargetType: !If ['LaunchTypeFargate', ip, instance]
      Matcher:
        HttpCode: 200
      Name: !Join ['-', [!If ['LaunchTypeFargate', fargate, ec2], !Ref ServiceName]]
      Port: !Ref TargetGroupPort
      Protocol: !Ref TargetGroupProtocol
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 20
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-VpcId

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref EcsCluster
      LaunchType: !If ['LaunchTypeFargate', FARGATE, EC2]
      DesiredCount: !Ref ServiceDesiredCount
      HealthCheckGracePeriodSeconds: 1800
      NetworkConfiguration:
        !If
        - LaunchTypeFargate
        - AwsvpcConfiguration:
            SecurityGroups:
              - Fn::ImportValue:
                  !Sub ${EcsStack}-EcsSecurityGroup
            Subnets:
              - Fn::ImportValue:
                  !Sub ${NetworkStack}-SubnetNodesAId
              - Fn::ImportValue:
                  !Sub ${NetworkStack}-SubnetNodesBId
              - Fn::ImportValue:
                  !Sub ${NetworkStack}-SubnetNodesCId
        - !Ref "AWS::NoValue"
      LoadBalancers:
        !If
        - CreateLoadBalancerResources
        - - ContainerName: !Ref ServiceName
            ContainerPort: !Ref ServicePort
            TargetGroupArn: !Ref TargetGroupForService
        - !Ref "AWS::NoValue"
      Role:
        !If
        - LaunchTypeFargate
        - !Ref "AWS::NoValue"
        - !If [CreateLoadBalancerResources, !Ref EcsServiceRole, !Ref "AWS::NoValue"]
      TaskDefinition: !Ref ServiceTaskdefinition

  # Load Balancer listener
  ListenerForElbForServices:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: "CreateListenerResource"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroupForService
      LoadBalancerArn: !Ref ElbForServices
      Port: 80
      Protocol: HTTP

  # create a listener rule that ROUTES to service
  ListenerRuleForService:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: CreateLoadBalancerResources
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupForService
      Conditions:
        - Field: path-pattern
          Values:
            - !Join ['', ["/", !Ref ServicePath, "/*"]]
      ListenerArn: !If [CreateListenerResource, !Ref ListenerForElbForServices, !Ref ElbListener]
#      ListenerArn: !Ref ElbListener
      Priority: !Ref RulePriority
