---
AWSTemplateFormatVersion: "2010-09-09"
Description: "VPC and Subnets for Customer Self Service Portal"

Parameters:
  VpcCidrPrefix:
    Type: "String"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})"

  DnsName:
    Type: "String"

Resources:
  Vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Join [ "", [!Ref VpcCidrPrefix, ".0/21"]]
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"

  # create three /24 subnets to hold Elastic Load Balancer(s). 251 usable IPs each gives plenty of room to scale
  subnetDmzA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt Vpc.CidrBlock, 7, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: DMZ A
      - Key: Scope
        Value: public
      VpcId: !Ref Vpc

  subnetDmzB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt Vpc.CidrBlock, 7, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: DMZ B
      - Key: Scope
        Value: public
      VpcId: !Ref Vpc

  subnetDmzC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt Vpc.CidrBlock, 7, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: DMZ C
      - Key: Scope
        Value: public
      VpcId: !Ref Vpc

  # create three /24 subnets to hold ec2/fargate instances. 251 usable IPs gives plenty of room to scale
  subnetNodesA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt Vpc.CidrBlock, 7, 8 ]]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: Nodes A
      - Key: Scope
        Value: private
      - Key: Purpose
        Value: nodes
      VpcId: !Ref Vpc

  subnetNodesB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt Vpc.CidrBlock, 7, 8 ]]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: Nodes B
      - Key: Scope
        Value: private
      - Key: Purpose
        Value: nodes
      VpcId: !Ref Vpc

  subnetNodesC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt Vpc.CidrBlock, 7, 8 ]]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: Nodes C
      - Key: Scope
        Value: private
      - Key: Purpose
        Value: nodes
      VpcId: !Ref Vpc

  # Create three /27 subnets to hold RDS instances
  subnetDbA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [0, !Cidr [!Select [ 6, !Cidr [ !GetAtt Vpc.CidrBlock, 7, 8 ]], 3, 5]]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: DB A
      - Key: Scope
        Value: private
      - Key: Purpose
        Value: db
      VpcId: !Ref Vpc

  subnetDbB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Select [1, !Cidr [!Select [ 6, !Cidr [ !GetAtt Vpc.CidrBlock, 7, 8 ]], 3, 5]]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: DB B
      - Key: Scope
        Value: private
      - Key: Purpose
        Value: db
      VpcId: !Ref Vpc

  subnetDbC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Select [2, !Cidr [!Select [ 6, !Cidr [ !GetAtt Vpc.CidrBlock, 7, 8 ]], 3, 5]]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: DB C
      - Key: Scope
        Value: private
      - Key: Purpose
        Value: db
      VpcId: !Ref Vpc

  DNS:
    Type: "AWS::Route53::HostedZone"
    DependsOn: Vpc
    Properties:
      HostedZoneConfig:
        Comment: "Internal DNS for CuSSP"
      Name: !Ref DnsName
      VPCs:
        -
          VPCId: !Ref Vpc
          VPCRegion: !Ref AWS::Region
      HostedZoneTags:
        - Key: Scope
          Value: private
        - Key: Purpose
          Value: DNS

  ServiceDiscoveryNamespace:
    Type: "AWS::ServiceDiscovery::PrivateDnsNamespace"
    DependsOn: DNS
    Properties:
      Name: !Join [ ".", ["services", !Ref DnsName]]
      Description: "Internal DNS Namespace for Service Discovery"
      Vpc: !Ref Vpc

Outputs:
  VpcId:
      Description : "VPC ID"
      Value:  !Ref Vpc
      Export:                               # export the ID of the Vpc so other stacks can import it
        Name: !Sub ${AWS::StackName}-VpcId

  VpcCidr:
      Description : "VPC CIDR ID"
      Value:  !GetAtt Vpc.CidrBlock
      Export:                               # export the IP range of the Vpc so other stacks can import it
        Name: !Sub ${AWS::StackName}-VpcCidr

  SubnetDmzAId:
      Description : "Subnet DMZ A ID"
      Value:  !Ref subnetDmzA
      Export:
        Name: !Sub ${AWS::StackName}-SubnetDmzAId

  SubnetDmzBId:
      Description : "Subnet DMZ B ID"
      Value:  !Ref subnetDmzB
      Export:
        Name: !Sub ${AWS::StackName}-SubnetDmzBId

  SubnetDmzCId:
      Description : "Subnet DMZ C ID"
      Value:  !Ref subnetDmzC
      Export:
        Name: !Sub ${AWS::StackName}-SubnetDmzCId

  # will be used for ECS cluster auto scaling group later
  SubnetNodesAId:
      Description : "Subnet Nodes A ID"
      Value:  !Ref subnetNodesA
      Export:
        Name: !Sub ${AWS::StackName}-SubnetNodesAId

  SubnetNodesBId:
      Description : "Subnet Nodes B ID"
      Value:  !Ref subnetNodesB
      Export:
        Name: !Sub ${AWS::StackName}-SubnetNodesBId

  SubnetNodesCId:
      Description : "Subnet Nodes C ID"
      Value:  !Ref subnetNodesC
      Export:
        Name: !Sub ${AWS::StackName}-SubnetNodesCId

  # will be used to create DB subnet groups later which are required for RDS
  SubnetDbAId:
      Description : "Subnet DB A ID"
      Value:  !Ref subnetDbA
      Export:
        Name: !Sub ${AWS::StackName}-SubnetDbAId

  SubnetDbBId:
      Description : "Subnet DB B ID"
      Value:  !Ref subnetDbB
      Export:
        Name: !Sub ${AWS::StackName}-SubnetDbBId

  SubnetDbCId:
      Description : "Subnet DB C ID"
      Value:  !Ref subnetDbC
      Export:
        Name: !Sub ${AWS::StackName}-SubnetDbCId

  ServiceDiscoveryNamespaceID:
    Description : "ID of private Service Discovery Namespace."
    Value:  !Ref ServiceDiscoveryNamespace
    Export:
      Name: !Sub ${AWS::StackName}-ServiceDiscoveryNamespaceID

  PrivateHostedZoneID:
      Description : "ID of private hosted zone"
      Value:  !Ref DNS
      Export:
        Name: !Sub ${AWS::StackName}-PrivateHostedZoneID

  PrivateHostedZoneDNS:
      Description : "DNS of private hosted zone"
      Value:  !Ref DnsName
      Export:
        Name: !Sub ${AWS::StackName}-PrivateHostedZoneDNS
